export const royaltieClearB64 = "I3ByYWdtYSB2ZXJzaW9uIDYKaW50IDEKcmV0dXJu"
//@ts-ignore 
export const royaltieB64 = "#pragma version 6
txn OnCompletion
int DeleteApplication
==
bnz main_l25
txn OnCompletion
int UpdateApplication
==
bnz main_l24
txn OnCompletion
int OptIn
==
bnz main_l23
txn OnCompletion
int CloseOut
==
bnz main_l22
txn OnCompletion
int NoOp
==
bnz main_l6
err
main_l6:
txna ApplicationArgs 0
method "createNFT(pay,axcfg,application)uint64"
==
bnz main_l21
txna ApplicationArgs 0
method "royaltieFreeMove(asset,uint64,account,account)void"
==
txn Sender
global CreatorAddress
==
&&
bnz main_l20
txna ApplicationArgs 0
method "setup(string,uint64,account,application,pay)void"
==
bnz main_l19
txna ApplicationArgs 0
method "transfer(asset,account,account,account,uint64,txn,asset)void"
==
bnz main_l18
txna ApplicationArgs 0
method "offer(asset,uint64,account)void"
==
bnz main_l17
txna ApplicationArgs 0
method "rescind(asset)void"
==
bnz main_l16
txn ApplicationID
int 0
==
txna ApplicationArgs 0
method "create()uint64"
==
&&
bnz main_l14
err
main_l14:
callsub create_30
main_l15:
return
main_l16:
callsub rescind_26
b main_l15
main_l17:
callsub createVigeeOffer_25
b main_l15
main_l18:
callsub marketTransfer_24
b main_l15
main_l19:
callsub setup_23
b main_l15
main_l20:
callsub royaltieFreeMove_27
b main_l15
main_l21:
callsub createPlatformNFT_22
b main_l15
main_l22:
int 1
return
main_l23:
int 1
return
main_l24:
txn Sender
global CreatorAddress
==
return
main_l25:
txn Sender
global CreatorAddress
==
return

// basisPointCalculation
basisPointCalculation_0:
store 7
store 6
load 7
int 0
==
bnz basisPointCalculation_0_l2
int 0
load 6
load 7
int 10000
mulw
divmodw
pop
pop
swap
!
assert
b basisPointCalculation_0_l3
basisPointCalculation_0_l2:
int 0
basisPointCalculation_0_l3:
retsub

// getApplicationAddress
getApplicationAddress_1:
store 20
load 20
app_params_get AppAddress
store 22
store 21
load 21
retsub

// ensureCurrentAppOptedIntoAsset
ensureCurrentAppOptedIntoAsset_2:
store 1
global CurrentApplicationAddress
load 1
asset_holding_get AssetBalance
store 3
store 2
load 3
!
bz ensureCurrentAppOptedIntoAsset_2_l2
itxn_begin
int axfer
itxn_field TypeEnum
load 1
itxn_field XferAsset
int 0
itxn_field AssetAmount
global CurrentApplicationAddress
itxn_field AssetReceiver
itxn_submit
ensureCurrentAppOptedIntoAsset_2_l2:
retsub

// transferAsset
transferAsset_3:
store 71
store 70
store 69
store 68
itxn_begin
int axfer
itxn_field TypeEnum
load 68
itxn_field XferAsset
load 69
itxn_field AssetSender
load 70
itxn_field AssetReceiver
load 71
itxn_field AssetAmount
itxn_submit
retsub

// transferAssets
transferAssets_4:
store 56
store 55
store 54
itxn_begin
int axfer
itxn_field TypeEnum
load 54
itxn_field XferAsset
load 55
itxn_field AssetAmount
load 56
itxn_field AssetReceiver
itxn_submit
retsub

// transferAlgos
transferAlgos_5:
store 46
store 45
itxn_begin
int pay
itxn_field TypeEnum
load 45
itxn_field Amount
load 46
itxn_field Receiver
itxn_submit
retsub

// assetCreationTaxSupplied
assetCreationTaxSupplied_6:
store 5
store 4
load 4
int 100000
load 5
callsub basisPointCalculation_0
int 100000
+
>=
assert
int 1
retsub

// getRoyaltiePolicy
getRoyaltiePolicy_7:
store 33
load 33
itob
app_global_get
retsub

// setRoyaltiePolicy
setRoyaltiePolicy_8:
store 26
store 25
store 24
store 23
load 23
itob
load 24
load 25
itob
concat
load 26
concat
app_global_put
retsub

// extractCollectorFromRoyaltiePolicy
extractCollectorFromRoyaltiePolicy_9:
store 34
load 34
extract 0 32
retsub

// extractShareFromRoyaltiePolicy
extractShareFromRoyaltiePolicy_10:
store 47
load 47
int 32
extract_uint64
retsub

// extractAuthorizerFromOffer
extractAuthorizerFromOffer_11:
store 35
load 35
callsub getOffer_15
callsub isOfferSet_14
assert
load 35
callsub getOffer_15
extract 0 32
retsub

// extractOfferAmountFromOffer
extractOfferAmountFromOffer_12:
store 38
load 38
callsub getOffer_15
callsub isOfferSet_14
assert
load 38
callsub getOffer_15
int 64
extract_uint64
retsub

// extractSellerFromOffer
extractSellerFromOffer_13:
store 39
load 39
callsub getOffer_15
callsub isOfferSet_14
assert
load 39
callsub getOffer_15
extract 32 32
retsub

// isOfferSet
isOfferSet_14:
store 36
load 36
int 0
!=
bnz isOfferSet_14_l2
int 0
b isOfferSet_14_l3
isOfferSet_14_l2:
int 1
isOfferSet_14_l3:
retsub

// getOffer
getOffer_15:
store 37
load 37
byte "O"
app_local_get
retsub

// distributePaymentViaAlgos
distributePaymentViaAlgos_16:
store 43
store 42
store 41
store 40
load 40
load 43
callsub extractShareFromRoyaltiePolicy_10
callsub basisPointCalculation_0
store 44
load 40
load 44
-
load 41
callsub transferAlgos_5
load 44
load 42
callsub transferAlgos_5
retsub

// distributePaymentViaAsset
distributePaymentViaAsset_17:
store 52
store 51
store 50
store 49
store 48
load 49
load 52
callsub extractShareFromRoyaltiePolicy_10
callsub basisPointCalculation_0
store 53
load 48
load 49
load 53
-
load 50
callsub transferAssets_4
load 48
load 53
load 51
callsub transferAssets_4
retsub

// fetchSolidarityWalletDetails
fetchSolidarityWalletDetails_18:
store 11
store 10
load 10
load 11
byte "SW"
app_local_get_ex
store 13
store 12
load 13
bnz fetchSolidarityWalletDetails_18_l2
int 0
itob
b fetchSolidarityWalletDetails_18_l3
fetchSolidarityWalletDetails_18_l2:
load 12
fetchSolidarityWalletDetails_18_l3:
retsub

// fetchSolidarityRate
fetchSolidarityRate_19:
store 9
store 8
load 8
load 9
callsub fetchSolidarityWalletDetails_18
callsub extractSolidarityRateFromWalletDetails_20
retsub

// extractSolidarityRateFromWalletDetails
extractSolidarityRateFromWalletDetails_20:
store 14
load 14
extract 0 1
retsub

// addSolidarityFeeForUser
addSolidarityFeeForUser_21:
store 17
store 16
store 15
load 17
app_params_get AppAddress
store 19
store 18
itxn_begin
int appl
itxn_field TypeEnum
load 17
itxn_field ApplicationID
int NoOp
itxn_field OnCompletion
int 0
itxn_field Fee
method "paySolidarityFee(pay)void"
itxn_field ApplicationArgs
load 15
itxn_field Accounts
itxn_submit
itxn_next
int pay
itxn_field TypeEnum
load 16
load 15
load 17
callsub fetchSolidarityRate_19
callsub basisPointCalculation_0
itxn_field Amount
int 0
itxn_field Fee
global ZeroAddress
itxn_field CloseRemainderTo
global ZeroAddress
itxn_field RekeyTo
load 18
itxn_field Receiver
retsub

// createPlatformNFT
createPlatformNFT_22:
global GroupSize
store 0
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetManager
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetClawback
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetFreeze
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns Sender
txn Sender
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetDefaultFrozen
int 1
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetMetadataHash
global ZeroAddress
!=
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetURL
global ZeroAddress
!=
assert
int 1
assert
txn GroupIndex
int 1
-
gtxns CreatedAssetID
callsub ensureCurrentAppOptedIntoAsset_2
txn Sender
txna ApplicationArgs 1
btoi
gtxns Amount
int TMPL_VID
callsub addSolidarityFeeForUser_21
load 0
int 1
+
store 0
txna ApplicationArgs 1
btoi
gtxns Amount
txn Sender
int TMPL_VID
callsub fetchSolidarityRate_19
callsub assetCreationTaxSupplied_6
assert
load 0
int 1000
*
assert
byte 0x151f7c75
txn GroupIndex
int 1
-
gtxns CreatedAssetID
itob
concat
log
int 1
retsub

// setup
setup_23:
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Applications
callsub getApplicationAddress_1
==
assert
int 0
txna ApplicationArgs 1
txna ApplicationArgs 2
btoi
int 0
itob
callsub setRoyaltiePolicy_8
int 225000
txn Sender
txna ApplicationArgs 4
btoi
txnas Applications
callsub fetchSolidarityRate_19
btoi
callsub basisPointCalculation_0
itob
log
int 1
retsub

// marketTransfer
marketTransfer_24:
txna ApplicationArgs 1
btoi
txnas Assets
callsub getRoyaltiePolicy_7
store 28
txn Sender
callsub getOffer_15
store 27
txna ApplicationArgs 2
btoi
txnas Accounts
acct_params_get AcctAuthAddr
store 30
store 29
txna ApplicationArgs 3
btoi
txnas Accounts
acct_params_get AcctAuthAddr
store 32
store 31
load 28
len
int 40
>=
assert
global GroupSize
int 2
==
txn Sender
load 27
callsub extractAuthorizerFromOffer_11
==
&&
txn GroupIndex
int 1
-
gtxns RekeyTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Sender
load 27
callsub extractAuthorizerFromOffer_11
==
&&
txna ApplicationArgs 5
btoi
load 27
callsub extractOfferAmountFromOffer_12
<=
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
txn GroupIndex
int 1
-
gtxns AssetCloseTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns AssetReceiver
global CurrentApplicationAddress
==
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int pay
==
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Receiver
global CurrentApplicationAddress
==
&&
||
&&
load 28
callsub extractCollectorFromRoyaltiePolicy_9
load 27
callsub extractAuthorizerFromOffer_11
==
&&
assert
load 27
callsub extractAuthorizerFromOffer_11
load 27
callsub extractSellerFromOffer_13
==
assert
load 29
global ZeroAddress
==
assert
load 31
global ZeroAddress
==
assert
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
bnz marketTransfer_24_l2
txn GroupIndex
int 1
-
gtxns Amount
load 27
callsub extractSellerFromOffer_13
txna ApplicationArgs 4
btoi
txnas Accounts
load 28
callsub distributePaymentViaAlgos_16
b marketTransfer_24_l3
marketTransfer_24_l2:
txn GroupIndex
int 1
-
gtxns XferAsset
txn GroupIndex
int 1
-
gtxns AssetAmount
txna ApplicationArgs 2
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Accounts
load 28
callsub distributePaymentViaAsset_17
marketTransfer_24_l3:
load 27
callsub extractAuthorizerFromOffer_11
txna ApplicationArgs 1
btoi
txnas Assets
itob
load 27
callsub extractAuthorizerFromOffer_11
load 27
callsub extractOfferAmountFromOffer_12
txna ApplicationArgs 5
btoi
-
callsub updateoffered_28
int 1
retsub

// createVigeeOffer
createVigeeOffer_25:
txn Sender
int TMPL_VID
callsub fetchSolidarityWalletDetails_18
int 0
itob
!=
assert
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
asset_holding_get AssetBalance
store 62
store 61
load 61
txna ApplicationArgs 2
btoi
>=
assert
txna ApplicationArgs 1
btoi
txnas Assets
callsub getpolicy_29
len
int 0
>
assert
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub updateoffered_28
int 1
retsub

// rescind
rescind_26:
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
callsub updateoffered_28
int 1
retsub

// royaltieFreeMove
royaltieFreeMove_27:
global CallerApplicationID
int TMPL_VID
==
assert
txna ApplicationArgs 3
btoi
txnas Accounts
int 0
app_opted_in
bz royaltieFreeMove_27_l2
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
callsub updateoffered_28
royaltieFreeMove_27_l2:
txna ApplicationArgs 1
btoi
txnas Assets
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub transferAsset_3
int 1
retsub

// update_offered
updateoffered_28:
store 60
store 59
store 58
store 57
load 60
int 0
>
bnz updateoffered_28_l2
load 57
load 58
app_local_del
b updateoffered_28_l3
updateoffered_28_l2:
load 57
load 58
load 59
load 60
itob
concat
app_local_put
updateoffered_28_l3:
retsub

// get_policy
getpolicy_29:
store 63
int 0
load 63
itob
app_global_get_ex
store 67
store 66
int 0
int 0
itob
app_global_get_ex
store 65
store 64
load 67
load 65
||
assert
load 67
bnz getpolicy_29_l2
load 64
b getpolicy_29_l3
getpolicy_29_l2:
load 66
getpolicy_29_l3:
retsub

// create
create_30:
byte 0x151f7c75
global CurrentApplicationID
itob
concat
log
int 1
retsub"