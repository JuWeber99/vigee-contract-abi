export const royaltieClearB64 = "I3ByYWdtYSB2ZXJzaW9uIDYKaW50IDEKcmV0dXJu"
//@ts-ignore 
export const royaltieB64 = "#pragma version 6
txn OnCompletion
int DeleteApplication
==
bnz main_l25
txn OnCompletion
int UpdateApplication
==
bnz main_l24
txn OnCompletion
int OptIn
==
bnz main_l23
txn OnCompletion
int CloseOut
==
bnz main_l22
txn OnCompletion
int NoOp
==
bnz main_l6
err
main_l6:
txna ApplicationArgs 0
method "createNFT(pay,acfg,application)uint64"
==
bnz main_l21
txna ApplicationArgs 0
method "royaltieFreeMove(asset,uint64,account,account)void"
==
txn Sender
global CreatorAddress
==
&&
bnz main_l20
txna ApplicationArgs 0
method "setup(string,uint64,account,application,pay)void"
==
bnz main_l19
txna ApplicationArgs 0
method "transfer(asset,account,account,account,uint64,txn,asset)void"
==
bnz main_l18
txna ApplicationArgs 0
method "offer(asset,uint64,account)void"
==
bnz main_l17
txna ApplicationArgs 0
method "rescind(asset)void"
==
bnz main_l16
txn ApplicationID
int 0
==
txna ApplicationArgs 0
method "create()uint64"
==
&&
bnz main_l14
err
main_l14:
callsub create_28
main_l15:
return
main_l16:
callsub rescind_24
b main_l15
main_l17:
callsub createVigeeOffer_23
b main_l15
main_l18:
callsub marketTransfer_22
b main_l15
main_l19:
callsub setup_21
b main_l15
main_l20:
callsub royaltieFreeMove_25
b main_l15
main_l21:
callsub createPlatformNFT_20
b main_l15
main_l22:
int 1
return
main_l23:
int 1
return
main_l24:
txn Sender
global CreatorAddress
==
return
main_l25:
txn Sender
global CreatorAddress
==
return

// resolveYield
resolveYield_0:
store 14
store 13
load 14
int 0
==
bnz resolveYield_0_l2
int 0
load 13
load 14
int 10000
mulw
divmodw
pop
pop
swap
!
assert
b resolveYield_0_l3
resolveYield_0_l2:
int 0
resolveYield_0_l3:
retsub

// getApplicationAddress
getApplicationAddress_1:
store 17
load 17
app_params_get AppAddress
store 19
store 18
load 18
retsub

// transferAssets
transferAssets_2:
store 45
store 44
store 43
itxn_begin
int axfer
itxn_field TypeEnum
load 43
itxn_field XferAsset
load 44
itxn_field AssetAmount
load 45
itxn_field AssetReceiver
itxn_submit
retsub

// transferAlgos
transferAlgos_3:
store 37
store 36
itxn_begin
int pay
itxn_field TypeEnum
load 36
itxn_field Amount
load 37
itxn_field Receiver
itxn_submit
retsub

// ensureCurrentAppOptedIntoAsset
ensureCurrentAppOptedIntoAsset_4:
store 1
global CurrentApplicationAddress
load 1
asset_holding_get AssetBalance
store 3
store 2
load 3
!
bz ensureCurrentAppOptedIntoAsset_4_l2
itxn_begin
int axfer
itxn_field TypeEnum
load 1
itxn_field XferAsset
int 0
itxn_field AssetAmount
global CurrentApplicationAddress
itxn_field AssetReceiver
itxn_submit
ensureCurrentAppOptedIntoAsset_4_l2:
retsub

// transferAsset
transferAsset_5:
store 60
store 59
store 58
store 57
itxn_begin
int axfer
itxn_field TypeEnum
load 57
itxn_field XferAsset
load 58
itxn_field AssetSender
load 59
itxn_field AssetReceiver
load 60
itxn_field AssetAmount
itxn_submit
retsub

// fetchSolidarityRate
fetchSolidarityRate_6:
store 5
store 4
load 4
load 5
byte "SR"
app_local_get_ex
store 7
store 6
load 7
bnz fetchSolidarityRate_6_l2
int 0
b fetchSolidarityRate_6_l3
fetchSolidarityRate_6_l2:
load 6
fetchSolidarityRate_6_l3:
retsub

// addSolidarityFeeForUser
addSolidarityFeeForUser_7:
store 10
store 9
store 8
load 10
app_params_get AppAddress
store 12
store 11
itxn_begin
int appl
itxn_field TypeEnum
load 10
itxn_field ApplicationID
int NoOp
itxn_field OnCompletion
int 0
itxn_field Fee
method "addSolidarityForUser(pay,account,string)void"
itxn_field ApplicationArgs
int 1
itob
itxn_field ApplicationArgs
byte "auction"
itxn_field ApplicationArgs
load 8
itxn_field Accounts
itxn_submit
itxn_next
int pay
itxn_field TypeEnum
load 9
load 8
load 10
callsub fetchSolidarityRate_6
callsub resolveYield_0
itxn_field Amount
int 0
itxn_field Fee
global ZeroAddress
itxn_field CloseRemainderTo
load 11
itxn_field Receiver
retsub

// assetCreationTaxSupplied
assetCreationTaxSupplied_8:
store 16
store 15
load 15
int 100000
load 16
callsub resolveYield_0
int 100000
+
>=
assert
int 1
retsub

// getBasisPoints
getBasisPoints_9:
byte "RBP"
app_global_get
retsub

// getReceiverAddress
getReceiverAddress_10:
byte "RRA"
app_global_get
retsub

// setBasisPoints
setBasisPoints_11:
store 20
byte "RBP"
load 20
app_global_put
retsub

// setRoyaltieReceiver
setRoyaltieReceiver_12:
store 21
byte "RRA"
load 21
app_global_put
retsub

// extractAuthorizerFromOffer
extractAuthorizerFromOffer_13:
store 27
load 27
callsub getOffer_17
callsub isOfferSet_16
assert
load 27
callsub getOffer_17
extract 0 32
retsub

// extractOfferAmountFromOffer
extractOfferAmountFromOffer_14:
store 30
load 30
callsub getOffer_17
callsub isOfferSet_16
assert
load 30
callsub getOffer_17
int 64
extract_uint64
retsub

// extractSellerFromOffer
extractSellerFromOffer_15:
store 31
load 31
callsub getOffer_17
callsub isOfferSet_16
assert
load 31
callsub getOffer_17
extract 32 32
retsub

// isOfferSet
isOfferSet_16:
store 28
load 28
int 0
!=
bnz isOfferSet_16_l2
int 0
b isOfferSet_16_l3
isOfferSet_16_l2:
int 1
isOfferSet_16_l3:
retsub

// getOffer
getOffer_17:
store 29
load 29
byte "O"
app_local_get
retsub

// distributePaymentViaAlgos
distributePaymentViaAlgos_18:
store 34
store 33
store 32
load 32
callsub getBasisPoints_9
callsub resolveYield_0
store 35
load 32
load 35
-
load 33
callsub transferAlgos_3
load 35
load 34
callsub transferAlgos_3
retsub

// distributePaymentViaAsset
distributePaymentViaAsset_19:
store 41
store 40
store 39
store 38
load 39
callsub getBasisPoints_9
callsub resolveYield_0
store 42
load 38
load 39
load 42
-
load 40
callsub transferAssets_2
load 38
load 42
load 41
callsub transferAssets_2
retsub

// createPlatformNFT
createPlatformNFT_20:
global GroupSize
store 0
txn GroupIndex
int 1
-
gtxns TypeEnum
int acfg
==
assert
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetManager
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetClawback
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetFreeze
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns Sender
txn Sender
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetDefaultFrozen
int 1
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetMetadataHash
global ZeroAddress
!=
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetURL
global ZeroAddress
!=
assert
int 1
assert
txn GroupIndex
int 1
-
gtxns CreatedAssetID
callsub ensureCurrentAppOptedIntoAsset_4
load 0
int 1
+
store 0
txn GroupIndex
int 2
-
gtxns TypeEnum
int pay
==
assert
txn Sender
txn GroupIndex
int 2
-
gtxns Amount
int TMPL_VID
callsub addSolidarityFeeForUser_7
txn GroupIndex
int 2
-
gtxns Amount
txn Sender
int TMPL_VID
callsub fetchSolidarityRate_6
callsub assetCreationTaxSupplied_8
assert
txn GroupIndex
int 2
-
gtxns Fee
load 0
int 1000
*
==
assert
int 1
assert
byte 0x151f7c75
txn GroupIndex
int 1
-
gtxns CreatedAssetID
itob
concat
log
int 1
retsub

// setup
setup_21:
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Applications
callsub getApplicationAddress_1
==
assert
txna ApplicationArgs 2
btoi
callsub setBasisPoints_11
txna ApplicationArgs 1
callsub setRoyaltieReceiver_12
int 225000
txn Sender
txna ApplicationArgs 4
btoi
txnas Applications
callsub fetchSolidarityRate_6
callsub resolveYield_0
itob
log
int 1
retsub

// marketTransfer
marketTransfer_22:
txn Sender
callsub getOffer_17
store 22
txna ApplicationArgs 2
btoi
txnas Accounts
acct_params_get AcctAuthAddr
store 24
store 23
txna ApplicationArgs 3
btoi
txnas Accounts
acct_params_get AcctAuthAddr
store 26
store 25
global GroupSize
int 2
==
txn Sender
load 22
callsub extractAuthorizerFromOffer_13
==
&&
txn GroupIndex
int 1
-
gtxns RekeyTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Sender
load 22
callsub extractAuthorizerFromOffer_13
==
&&
txna ApplicationArgs 5
btoi
load 22
callsub extractOfferAmountFromOffer_14
<=
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
txn GroupIndex
int 1
-
gtxns AssetCloseTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns AssetReceiver
global CurrentApplicationAddress
==
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int pay
==
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Receiver
global CurrentApplicationAddress
==
&&
||
&&
callsub getReceiverAddress_10
load 22
callsub extractAuthorizerFromOffer_13
==
&&
assert
load 22
callsub extractAuthorizerFromOffer_13
load 22
callsub extractSellerFromOffer_15
==
assert
load 23
global ZeroAddress
==
assert
load 25
global ZeroAddress
==
assert
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
bnz marketTransfer_22_l2
txn GroupIndex
int 1
-
gtxns Amount
load 22
callsub extractSellerFromOffer_15
txna ApplicationArgs 4
btoi
txnas Accounts
callsub distributePaymentViaAlgos_18
b marketTransfer_22_l3
marketTransfer_22_l2:
txn GroupIndex
int 1
-
gtxns XferAsset
txn GroupIndex
int 1
-
gtxns AssetAmount
txna ApplicationArgs 2
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Accounts
callsub distributePaymentViaAsset_19
marketTransfer_22_l3:
load 22
callsub extractAuthorizerFromOffer_13
txna ApplicationArgs 1
btoi
txnas Assets
itob
load 22
callsub extractAuthorizerFromOffer_13
load 22
callsub extractOfferAmountFromOffer_14
txna ApplicationArgs 5
btoi
-
callsub updateoffered_26
int 1
retsub

// createVigeeOffer
createVigeeOffer_23:
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
asset_holding_get AssetBalance
store 51
store 50
load 50
txna ApplicationArgs 2
btoi
>=
assert
txna ApplicationArgs 1
btoi
txnas Assets
callsub getpolicy_27
len
int 0
>
assert
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub updateoffered_26
int 1
retsub

// rescind
rescind_24:
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
callsub updateoffered_26
int 1
retsub

// royaltieFreeMove
royaltieFreeMove_25:
global CallerApplicationID
int TMPL_VID
==
assert
txna ApplicationArgs 3
btoi
txnas Accounts
int 0
app_opted_in
bz royaltieFreeMove_25_l2
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
callsub updateoffered_26
royaltieFreeMove_25_l2:
txna ApplicationArgs 1
btoi
txnas Assets
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub transferAsset_5
int 1
retsub

// update_offered
updateoffered_26:
store 49
store 48
store 47
store 46
load 49
int 0
>
bnz updateoffered_26_l2
load 46
load 47
app_local_del
b updateoffered_26_l3
updateoffered_26_l2:
load 46
load 47
load 48
load 49
itob
concat
app_local_put
updateoffered_26_l3:
retsub

// get_policy
getpolicy_27:
store 52
int 0
load 52
itob
app_global_get_ex
store 56
store 55
int 0
int 0
itob
app_global_get_ex
store 54
store 53
load 56
load 54
||
assert
load 56
bnz getpolicy_27_l2
load 53
b getpolicy_27_l3
getpolicy_27_l2:
load 55
getpolicy_27_l3:
retsub

// create
create_28:
byte 0x151f7c75
global CurrentApplicationID
itob
concat
log
int 1
retsub"