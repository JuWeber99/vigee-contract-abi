export const royaltieClearB64 = "I3ByYWdtYSB2ZXJzaW9uIDYKaW50IDEKcmV0dXJu"
//@ts-ignore 
export const royaltieB64 = "#pragma version 6
txn OnCompletion
int DeleteApplication
==
bnz main_l25
txn OnCompletion
int UpdateApplication
==
bnz main_l24
txn OnCompletion
int OptIn
==
bnz main_l23
txn OnCompletion
int CloseOut
==
bnz main_l22
txn OnCompletion
int NoOp
==
bnz main_l6
err
main_l6:
txna ApplicationArgs 0
method "createNFT(pay,acfg,application,account,asset)uint64"
==
bnz main_l21
txna ApplicationArgs 0
method "royaltieFreeMove(asset,uint64,account,account)void"
==
txn Sender
global CreatorAddress
==
&&
bnz main_l20
txna ApplicationArgs 0
method "setup(string,uint64,account,application,pay)void"
==
bnz main_l19
txna ApplicationArgs 0
method "transfer(asset,account,account,account,uint64,txn,asset)void"
==
bnz main_l18
txna ApplicationArgs 0
method "offer(asset,uint64,account)void"
==
bnz main_l17
txna ApplicationArgs 0
method "rescind(asset)void"
==
bnz main_l16
txn ApplicationID
int 0
==
txna ApplicationArgs 0
method "create()uint64"
==
&&
bnz main_l14
err
main_l14:
callsub create_29
main_l15:
return
main_l16:
callsub rescind_25
b main_l15
main_l17:
callsub createVigeeOffer_24
b main_l15
main_l18:
callsub marketTransfer_23
b main_l15
main_l19:
callsub setup_22
b main_l15
main_l20:
callsub royaltieFreeMove_26
b main_l15
main_l21:
callsub createPlatformNFT_21
b main_l15
main_l22:
int 1
return
main_l23:
int 1
return
main_l24:
txn Sender
global CreatorAddress
==
return
main_l25:
txn Sender
global CreatorAddress
==
return

// resolveYield
resolveYield_0:
store 18
store 17
load 18
int 0
==
bnz resolveYield_0_l2
int 0
load 17
load 18
int 10000
mulw
divmodw
pop
pop
swap
!
assert
b resolveYield_0_l3
resolveYield_0_l2:
int 0
resolveYield_0_l3:
retsub

// getApplicationAddress
getApplicationAddress_1:
store 19
load 19
app_params_get AppAddress
store 21
store 20
load 20
retsub

// transferAssets
transferAssets_2:
store 49
store 48
store 47
itxn_begin
int axfer
itxn_field TypeEnum
load 47
itxn_field XferAsset
load 48
itxn_field AssetAmount
load 49
itxn_field AssetReceiver
itxn_submit
retsub

// transferAlgos
transferAlgos_3:
store 41
store 40
itxn_begin
int pay
itxn_field TypeEnum
load 40
itxn_field Amount
load 41
itxn_field Receiver
itxn_submit
retsub

// ensureCurrentAppOptedIntoAsset
ensureCurrentAppOptedIntoAsset_4:
store 1
global CurrentApplicationAddress
load 1
asset_holding_get AssetBalance
store 3
store 2
load 3
!
bz ensureCurrentAppOptedIntoAsset_4_l2
itxn_begin
int axfer
itxn_field TypeEnum
load 1
itxn_field XferAsset
int 0
itxn_field AssetAmount
global CurrentApplicationAddress
itxn_field AssetReceiver
itxn_submit
ensureCurrentAppOptedIntoAsset_4_l2:
retsub

// transferAsset
transferAsset_5:
store 64
store 63
store 62
store 61
itxn_begin
int axfer
itxn_field TypeEnum
load 61
itxn_field XferAsset
load 62
itxn_field AssetSender
load 63
itxn_field AssetReceiver
load 64
itxn_field AssetAmount
itxn_submit
retsub

// fetchSolidarityRate
fetchSolidarityRate_6:
store 5
store 4
load 4
load 5
byte "SR"
app_local_get_ex
store 7
store 6
load 7
bnz fetchSolidarityRate_6_l2
int 0
b fetchSolidarityRate_6_l3
fetchSolidarityRate_6_l2:
load 6
fetchSolidarityRate_6_l3:
retsub

// fetchSolidarityAssetID
fetchSolidarityAssetID_7:
store 8
load 8
byte "SA"
app_global_get_ex
store 10
store 9
load 10
bnz fetchSolidarityAssetID_7_l2
int 0
b fetchSolidarityAssetID_7_l3
fetchSolidarityAssetID_7_l2:
load 9
fetchSolidarityAssetID_7_l3:
retsub

// addSolidarityFeeForUser
addSolidarityFeeForUser_8:
store 15
store 14
store 13
store 12
store 11
load 12
load 11
load 13
callsub fetchSolidarityRate_6
callsub resolveYield_0
store 16
itxn_begin
int pay
itxn_field TypeEnum
load 16
itxn_field Amount
int 0
itxn_field Fee
load 13
callsub getApplicationAddress_1
itxn_field Receiver
itxn_next
int appl
itxn_field TypeEnum
load 13
itxn_field ApplicationID
int NoOp
itxn_field OnCompletion
int 0
itxn_field Fee
method "addSolidarityForUser(pay,account,account,string,asset)void"
itxn_field ApplicationArgs
int 1
itob
itxn_field ApplicationArgs
int 2
itob
itxn_field ApplicationArgs
int 0
itob
itxn_field ApplicationArgs
byte "auction"
itxn_field ApplicationArgs
load 11
itxn_field Accounts
load 13
callsub getApplicationAddress_1
itxn_field Accounts
load 15
itxn_field Assets
itxn_submit
retsub

// assetCreationTaxSupplied
assetCreationTaxSupplied_9:
store 23
store 22
load 22
int 100000
load 23
callsub resolveYield_0
int 100000
+
>=
assert
int 1
retsub

// getBasisPoints
getBasisPoints_10:
byte "RBP"
app_global_get
retsub

// getReceiverAddress
getReceiverAddress_11:
byte "RRA"
app_global_get
retsub

// setBasisPoints
setBasisPoints_12:
store 24
byte "RBP"
load 24
app_global_put
retsub

// setRoyaltieReceiver
setRoyaltieReceiver_13:
store 25
byte "RRA"
load 25
app_global_put
retsub

// extractAuthorizerFromOffer
extractAuthorizerFromOffer_14:
store 31
load 31
callsub getOffer_18
callsub isOfferSet_17
assert
load 31
callsub getOffer_18
extract 0 32
retsub

// extractOfferAmountFromOffer
extractOfferAmountFromOffer_15:
store 34
load 34
callsub getOffer_18
callsub isOfferSet_17
assert
load 34
callsub getOffer_18
int 64
extract_uint64
retsub

// extractSellerFromOffer
extractSellerFromOffer_16:
store 35
load 35
callsub getOffer_18
callsub isOfferSet_17
assert
load 35
callsub getOffer_18
extract 32 32
retsub

// isOfferSet
isOfferSet_17:
store 32
load 32
int 0
!=
bnz isOfferSet_17_l2
int 0
b isOfferSet_17_l3
isOfferSet_17_l2:
int 1
isOfferSet_17_l3:
retsub

// getOffer
getOffer_18:
store 33
load 33
byte "O"
app_local_get
retsub

// distributePaymentViaAlgos
distributePaymentViaAlgos_19:
store 38
store 37
store 36
load 36
callsub getBasisPoints_10
callsub resolveYield_0
store 39
load 36
load 39
-
load 37
callsub transferAlgos_3
load 39
load 38
callsub transferAlgos_3
retsub

// distributePaymentViaAsset
distributePaymentViaAsset_20:
store 45
store 44
store 43
store 42
load 43
callsub getBasisPoints_10
callsub resolveYield_0
store 46
load 42
load 43
load 46
-
load 44
callsub transferAssets_2
load 42
load 46
load 45
callsub transferAssets_2
retsub

// createPlatformNFT
createPlatformNFT_21:
global GroupSize
store 0
txn GroupIndex
int 1
-
gtxns TypeEnum
int acfg
==
assert
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetManager
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetClawback
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetFreeze
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns Sender
txn Sender
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetDefaultFrozen
int 1
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetMetadataHash
global ZeroAddress
!=
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetURL
global ZeroAddress
!=
assert
int 1
assert
txn GroupIndex
int 1
-
gtxns CreatedAssetID
callsub ensureCurrentAppOptedIntoAsset_4
load 0
int 1
+
store 0
txn GroupIndex
int 2
-
gtxns TypeEnum
int pay
==
assert
txn Sender
txn GroupIndex
int 2
-
gtxns Amount
int TMPL_VID
global CurrentApplicationAddress
int TMPL_VID
callsub fetchSolidarityAssetID_7
callsub addSolidarityFeeForUser_8
txn GroupIndex
int 2
-
gtxns Amount
txn Sender
int TMPL_VID
callsub fetchSolidarityRate_6
callsub assetCreationTaxSupplied_9
assert
txn GroupIndex
int 2
-
gtxns Fee
load 0
int 1000
*
>=
assert
int 1
assert
byte 0x151f7c75
txn GroupIndex
int 1
-
gtxns CreatedAssetID
itob
concat
log
int 1
retsub

// setup
setup_22:
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Applications
callsub getApplicationAddress_1
==
assert
txna ApplicationArgs 2
btoi
callsub setBasisPoints_12
txna ApplicationArgs 1
callsub setRoyaltieReceiver_13
int 225000
txn Sender
txna ApplicationArgs 4
btoi
txnas Applications
callsub fetchSolidarityRate_6
callsub resolveYield_0
itob
log
int 1
retsub

// marketTransfer
marketTransfer_23:
txn Sender
callsub getOffer_18
store 26
txna ApplicationArgs 2
btoi
txnas Accounts
acct_params_get AcctAuthAddr
store 28
store 27
txna ApplicationArgs 3
btoi
txnas Accounts
acct_params_get AcctAuthAddr
store 30
store 29
global GroupSize
int 2
==
txn Sender
load 26
callsub extractAuthorizerFromOffer_14
==
&&
txn GroupIndex
int 1
-
gtxns RekeyTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Sender
load 26
callsub extractAuthorizerFromOffer_14
==
&&
txna ApplicationArgs 5
btoi
load 26
callsub extractOfferAmountFromOffer_15
<=
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
txn GroupIndex
int 1
-
gtxns AssetCloseTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns AssetReceiver
global CurrentApplicationAddress
==
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int pay
==
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Receiver
global CurrentApplicationAddress
==
&&
||
&&
callsub getReceiverAddress_11
load 26
callsub extractAuthorizerFromOffer_14
==
&&
assert
load 26
callsub extractAuthorizerFromOffer_14
load 26
callsub extractSellerFromOffer_16
==
assert
load 27
global ZeroAddress
==
assert
load 29
global ZeroAddress
==
assert
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
bnz marketTransfer_23_l2
txn GroupIndex
int 1
-
gtxns Amount
load 26
callsub extractSellerFromOffer_16
txna ApplicationArgs 4
btoi
txnas Accounts
callsub distributePaymentViaAlgos_19
b marketTransfer_23_l3
marketTransfer_23_l2:
txn GroupIndex
int 1
-
gtxns XferAsset
txn GroupIndex
int 1
-
gtxns AssetAmount
txna ApplicationArgs 2
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Accounts
callsub distributePaymentViaAsset_20
marketTransfer_23_l3:
load 26
callsub extractAuthorizerFromOffer_14
txna ApplicationArgs 1
btoi
txnas Assets
itob
load 26
callsub extractAuthorizerFromOffer_14
load 26
callsub extractOfferAmountFromOffer_15
txna ApplicationArgs 5
btoi
-
callsub updateoffered_27
int 1
retsub

// createVigeeOffer
createVigeeOffer_24:
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
asset_holding_get AssetBalance
store 55
store 54
load 54
txna ApplicationArgs 2
btoi
>=
assert
txna ApplicationArgs 1
btoi
txnas Assets
callsub getpolicy_28
len
int 0
>
assert
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub updateoffered_27
int 1
retsub

// rescind
rescind_25:
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
callsub updateoffered_27
int 1
retsub

// royaltieFreeMove
royaltieFreeMove_26:
global CallerApplicationID
int TMPL_VID
==
assert
txna ApplicationArgs 3
btoi
txnas Accounts
int 0
app_opted_in
bz royaltieFreeMove_26_l2
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
callsub updateoffered_27
royaltieFreeMove_26_l2:
txna ApplicationArgs 1
btoi
txnas Assets
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub transferAsset_5
int 1
retsub

// update_offered
updateoffered_27:
store 53
store 52
store 51
store 50
load 53
int 0
>
bnz updateoffered_27_l2
load 50
load 51
app_local_del
b updateoffered_27_l3
updateoffered_27_l2:
load 50
load 51
load 52
load 53
itob
concat
app_local_put
updateoffered_27_l3:
retsub

// get_policy
getpolicy_28:
store 56
int 0
load 56
itob
app_global_get_ex
store 60
store 59
int 0
int 0
itob
app_global_get_ex
store 58
store 57
load 60
load 58
||
assert
load 60
bnz getpolicy_28_l2
load 57
b getpolicy_28_l3
getpolicy_28_l2:
load 59
getpolicy_28_l3:
retsub

// create
create_29:
byte 0x151f7c75
global CurrentApplicationID
itob
concat
log
int 1
retsub"