{
    "approvalTemplate": "",
    "clearTemplate": "I3ByYWdtYSB2ZXJzaW9uIDYKaW50IDEKcmV0dXJu",
    "approvalProgram": {},
    "clearProgram": {},
    "handle": {
        "name": "Vigee Royaltie Enforcer",
        "networks": {},
        "methods": [{
            "name": "setup",
            "desc": "setup royaltie enforcer with policy",
            "args": [{
                "type": "pay",
                "name": "taxTransaction"
            }, {
                "type": "account",
                "name": "royaltieReceiverDefault"
            }, {
                "type": "uint64",
                "name": "royaltieShareDefault"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "createNFT",
            "desc": "Create an nft with appropriate parameters, return its id",
            "args": [{
                "type": "pay",
                "name": "taxTransaction"
            }, {
                "type": "acfg",
                "name": "assetCreateTransaction"
            }],
            "returns": {
                "type": "uint64"
            }
        }, {
            "name": "swapinNFT",
            "args": [{
                "type": "pay",
                "name": "taxTransaction"
            }, {
                "type": "acfg",
                "name": "assetReconfigurationTransaction"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "addToCollection",
            "args": [{
                "type": "application",
                "name": "collectionApp"
            }],
            "returns": {
                "type": "uint64"
            }
        }, {
            "name": "setPolicy",
            "desc": "Sets the royalty policy for a given asset id",
            "args": [{
                "type": "address",
                "name": "royalty_receiver"
            }, {
                "type": "uint64",
                "name": "royalty_share"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "getPolicy",
            "desc": "Gets the royalty policy for a given asset id",
            "args": [{
                "type": "uint64",
                "name": "royalty_asset"
            }],
            "returns": {
                "type": "(address,uint64,uint64,uint64,uint64,uint64)"
            }
        }, {
            "name": "lockForOffer",
            "desc": "Flags that an asset is offered for sale and sets address authorized to submit the transfer",
            "args": [{
                "type": "asset",
                "name": "royalty_asset"
            }, {
                "type": "uint64",
                "name": "royalty_asset_amount"
            }, {
                "type": "account",
                "name": "authorized_address"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "getOffer",
            "desc": "Gets the details offered asset",
            "args": [{
                "type": "uint64",
                "name": "royalty_asset"
            }, {
                "type": "uint64",
                "name": "from"
            }],
            "returns": {
                "type": "(address,uint64)"
            }
        }, {
            "name": "rescind",
            "desc": "Rescinds offered asset",
            "args": [{
                "type": "asset",
                "name": "royalty_asset"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "royaltyFreeMove",
            "desc": "Moves the asset passed from one account to another. This will wipe any offered state from the `from` account and can only be performed from the main application to move assets to an utiltity address",
            "args": [{
                "type": "asset",
                "name": "royalty_asset"
            }, {
                "type": "uint64",
                "name": "royalty_asset_amount"
            }, {
                "type": "account",
                "name": "from"
            }, {
                "type": "account",
                "name": "to"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "setPaymentAsset",
            "desc": "Triggers the contract account to opt in or out of an asset that should be used for payment of royalties",
            "args": [{
                "type": "asset",
                "name": "paymentAsset"
            }, {
                "type": "bool",
                "name": "allowed"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "transfer",
            "desc": "Transfers an Asset from one account to another and enforces royalty payments. If payment is in Algos, payment_asset should be 0",
            "args": [{
                "type": "asset",
                "name": "royalty_asset"
            }, {
                "type": "account",
                "name": "from"
            }, {
                "type": "account",
                "name": "to"
            }, {
                "type": "account",
                "name": "royalty_receiver"
            }, {
                "type": "uint64",
                "name": "royalty_asset_amount"
            }, {
                "type": "txn",
                "name": "payment"
            }, {
                "type": "asset",
                "name": "payment_asset"
            }],
            "returns": {
                "type": "void"
            }
        }, {
            "name": "adminSetRoyaltieEnforcerHash",
            "args": [{
                "type": "string",
                "name": "royaltieEnforcerHash"
            }],
            "returns": {
                "type": "void"
            }
        }]
    },
    "appID": 0,
    "client": {
        "c": {
            "bc": {
                "defaultHeaders": {},
                "baseURL": {
                    "slashes": true,
                    "protocol": "http:",
                    "hash": "",
                    "query": "",
                    "pathname": "/",
                    "auth": "",
                    "host": "195.48.55.231:4001",
                    "port": "4001",
                    "hostname": "195.48.55.231",
                    "password": "",
                    "username": "",
                    "origin": "http://195.48.55.231:4001",
                    "href": "http://195.48.55.231:4001/"
                },
                "tokenHeader": {
                    "X-Algo-API-Token": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                }
            }
        },
        "intDecoding": "default"
    },
    "globalSchema": {
        "numUint": 0,
        "numByteSlice": 2
    },
    "localSchema": {
        "numUint": 0,
        "numByteSlice": 1
    },
    "address": "6X7XJO6FX3SHUK2OUL46QBQDSNO67RAFK6O73KJD4IVOMTSOIYANOIVWNU",
    "mainAppID": 1
}