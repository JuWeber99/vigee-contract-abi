#pragma version 6
txn OnCompletion
int DeleteApplication
==
bnz main_l25
txn OnCompletion
int UpdateApplication
==
bnz main_l24
txn OnCompletion
int OptIn
==
bnz main_l23
txn OnCompletion
int CloseOut
==
bnz main_l22
txn OnCompletion
int NoOp
==
bnz main_l6
err
main_l6:
txna ApplicationArgs 0
method "createNFT(pay,acfg,application,account,asset)uint64"
==
bnz main_l21
txna ApplicationArgs 0
method "royaltieFreeMove(asset,uint64,account,account)void"
==
txn Sender
global CreatorAddress
==
&&
bnz main_l20
txna ApplicationArgs 0
method "setup(string,uint64,account,application,pay)void"
==
bnz main_l19
txna ApplicationArgs 0
method "transfer(asset,account,account,account,uint64,txn,asset)void"
==
bnz main_l18
txna ApplicationArgs 0
method "offer(asset,uint64,account)void"
==
bnz main_l17
txna ApplicationArgs 0
method "rescind(asset)void"
==
bnz main_l16
txn ApplicationID
int 0
==
txna ApplicationArgs 0
method "create()uint64"
==
&&
bnz main_l14
err
main_l14:
callsub create_30
main_l15:
return
main_l16:
callsub rescind_26
b main_l15
main_l17:
callsub createVigeeOffer_25
b main_l15
main_l18:
callsub marketTransfer_24
b main_l15
main_l19:
callsub setup_23
b main_l15
main_l20:
callsub royaltieFreeMove_27
b main_l15
main_l21:
callsub createPlatformNFT_22
b main_l15
main_l22:
int 1
return
main_l23:
int 1
return
main_l24:
txn Sender
global CreatorAddress
==
return
main_l25:
txn Sender
global CreatorAddress
==
return

// resolveYield
resolveYield_0:
store 18
store 17
load 17
load 18
mulw
int 0
int 10000
divmodw
pop
pop
swap
!
assert
itob
log
load 18
int 0
==
bnz resolveYield_0_l2
load 17
load 18
mulw
int 0
int 10000
divmodw
pop
pop
swap
!
assert
b resolveYield_0_l3
resolveYield_0_l2:
int 0
resolveYield_0_l3:
retsub

// getApplicationAddress
getApplicationAddress_1:
store 19
load 19
app_params_get AppAddress
store 21
store 20
load 20
retsub

// transferAssets
transferAssets_2:
store 50
store 49
store 48
itxn_begin
int axfer
itxn_field TypeEnum
load 48
itxn_field XferAsset
load 49
itxn_field AssetAmount
load 50
itxn_field AssetReceiver
itxn_submit
retsub

// transferAlgos
transferAlgos_3:
store 42
store 41
itxn_begin
int pay
itxn_field TypeEnum
load 41
itxn_field Amount
load 42
itxn_field Receiver
itxn_submit
retsub

// ensureCurrentAppOptedIntoAsset
ensureCurrentAppOptedIntoAsset_4:
store 1
global CurrentApplicationAddress
load 1
asset_holding_get AssetBalance
store 3
store 2
load 3
!
bz ensureCurrentAppOptedIntoAsset_4_l2
itxn_begin
int axfer
itxn_field TypeEnum
load 1
itxn_field XferAsset
int 0
itxn_field AssetAmount
global CurrentApplicationAddress
itxn_field AssetReceiver
itxn_submit
ensureCurrentAppOptedIntoAsset_4_l2:
retsub

// transferAsset
transferAsset_5:
store 31
store 30
store 29
store 28
itxn_begin
int axfer
itxn_field TypeEnum
load 28
itxn_field XferAsset
load 29
itxn_field AssetSender
load 30
itxn_field AssetReceiver
load 31
itxn_field AssetAmount
itxn_submit
retsub

// fetchSolidarityRate
fetchSolidarityRate_6:
store 5
store 4
load 4
load 5
byte "SR"
app_local_get_ex
store 7
store 6
load 7
bnz fetchSolidarityRate_6_l2
int 0
b fetchSolidarityRate_6_l3
fetchSolidarityRate_6_l2:
load 6
fetchSolidarityRate_6_l3:
retsub

// fetchSolidarityAssetID
fetchSolidarityAssetID_7:
store 8
load 8
byte "SA"
app_global_get_ex
store 10
store 9
load 10
bnz fetchSolidarityAssetID_7_l2
int 0
b fetchSolidarityAssetID_7_l3
fetchSolidarityAssetID_7_l2:
load 9
fetchSolidarityAssetID_7_l3:
retsub

// addSolidarityFeeForUser
addSolidarityFeeForUser_8:
store 15
store 14
store 13
store 12
store 11
load 12
load 11
load 13
callsub fetchSolidarityRate_6
callsub resolveYield_0
store 16
itxn_begin
int pay
itxn_field TypeEnum
load 16
itxn_field Amount
int 0
itxn_field Fee
load 13
callsub getApplicationAddress_1
itxn_field Receiver
itxn_next
int appl
itxn_field TypeEnum
load 13
itxn_field ApplicationID
int NoOp
itxn_field OnCompletion
int 0
itxn_field Fee
method "addSolidarityForUser(pay,account,account,string,asset)void"
itxn_field ApplicationArgs
int 1
itob
itxn_field ApplicationArgs
int 2
itob
itxn_field ApplicationArgs
int 0
itob
itxn_field ApplicationArgs
byte "auction"
itxn_field ApplicationArgs
load 11
itxn_field Accounts
load 13
callsub getApplicationAddress_1
itxn_field Accounts
load 15
itxn_field Assets
itxn_submit
retsub

// offered_amount
offeredamount_9:
store 59
load 59
int 32
extract_uint64
retsub

// offered_auth
offeredauth_10:
store 60
load 60
extract 0 32
retsub

// assetCreationTaxSupplied
assetCreationTaxSupplied_11:
store 23
store 22
load 22
int 100000
load 23
callsub resolveYield_0
int 100000
+
>=
assert
int 1
retsub

// getBasisPoints
getBasisPoints_12:
byte "RBP"
app_global_get
retsub

// getReceiverAddress
getReceiverAddress_13:
byte "RRA"
app_global_get
retsub

// setBasisPoints
setBasisPoints_14:
store 24
byte "RBP"
load 24
app_global_put
retsub

// setRoyaltieReceiver
setRoyaltieReceiver_15:
store 25
byte "RRA"
load 25
app_global_put
retsub

// extractOfferAmountFromOffer
extractOfferAmountFromOffer_16:
store 32
load 32
callsub isOfferSet_18
assert
load 32
int 64
extract_uint64
retsub

// extractSellerFromOffer
extractSellerFromOffer_17:
store 34
load 34
callsub isOfferSet_18
assert
load 34
extract 32 32
retsub

// isOfferSet
isOfferSet_18:
store 33
load 33
int 0
!=
bnz isOfferSet_18_l2
int 0
b isOfferSet_18_l3
isOfferSet_18_l2:
int 1
isOfferSet_18_l3:
retsub

// getOffer
getOffer_19:
store 36
store 35
load 35
load 36
itob
app_local_get
retsub

// distributePaymentViaAlgos
distributePaymentViaAlgos_20:
store 39
store 38
store 37
load 37
callsub getBasisPoints_12
callsub resolveYield_0
store 40
load 37
load 40
-
load 38
callsub transferAlgos_3
load 40
load 39
callsub transferAlgos_3
retsub

// distributePaymentViaAsset
distributePaymentViaAsset_21:
store 46
store 45
store 44
store 43
load 44
callsub getBasisPoints_12
callsub resolveYield_0
store 47
load 43
load 44
load 47
-
load 45
callsub transferAssets_2
load 43
load 47
load 46
callsub transferAssets_2
retsub

// createPlatformNFT
createPlatformNFT_22:
global GroupSize
store 0
txn GroupIndex
int 1
-
gtxns TypeEnum
int acfg
==
assert
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetManager
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetClawback
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetFreeze
global CurrentApplicationAddress
==
assert
txn GroupIndex
int 1
-
gtxns Sender
txn Sender
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetDefaultFrozen
int 1
==
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetMetadataHash
global ZeroAddress
!=
assert
txn GroupIndex
int 1
-
gtxns ConfigAssetURL
global ZeroAddress
!=
assert
int 1
assert
txn GroupIndex
int 1
-
gtxns CreatedAssetID
callsub ensureCurrentAppOptedIntoAsset_4
load 0
int 1
+
store 0
txn GroupIndex
int 2
-
gtxns TypeEnum
int pay
==
assert
txn Sender
txn GroupIndex
int 2
-
gtxns Amount
int TMPL_VID
global CurrentApplicationAddress
int TMPL_VID
callsub fetchSolidarityAssetID_7
callsub addSolidarityFeeForUser_8
txn GroupIndex
int 2
-
gtxns Amount
txn Sender
int TMPL_VID
callsub fetchSolidarityRate_6
callsub assetCreationTaxSupplied_11
assert
txn GroupIndex
int 2
-
gtxns Fee
load 0
int 1000
*
>=
assert
int 1
assert
txn GroupIndex
int 2
-
gtxns Amount
itob
log
byte 0x151f7c75
txn GroupIndex
int 1
-
gtxns CreatedAssetID
itob
concat
log
int 1
retsub

// setup
setup_23:
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Applications
callsub getApplicationAddress_1
==
assert
txna ApplicationArgs 2
btoi
callsub setBasisPoints_14
txna ApplicationArgs 1
callsub setRoyaltieReceiver_15
int 225000
txn Sender
txna ApplicationArgs 4
btoi
txnas Applications
callsub fetchSolidarityRate_6
callsub resolveYield_0
itob
log
int 1
retsub

// marketTransfer
marketTransfer_24:
callsub getReceiverAddress_13
store 26
callsub getBasisPoints_12
store 27
global GroupSize
int 2
==
txn Sender
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
callsub getOffer_19
callsub extractSellerFromOffer_17
==
&&
txn GroupIndex
int 1
-
gtxns RekeyTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Sender
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
callsub getOffer_19
callsub extractSellerFromOffer_17
==
&&
txna ApplicationArgs 2
btoi
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
callsub getOffer_19
callsub extractOfferAmountFromOffer_16
<=
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
txn GroupIndex
int 1
-
gtxns AssetCloseTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns AssetReceiver
global CurrentApplicationAddress
==
&&
txn GroupIndex
int 1
-
gtxns TypeEnum
int pay
==
txn GroupIndex
int 1
-
gtxns CloseRemainderTo
global ZeroAddress
==
&&
txn GroupIndex
int 1
-
gtxns Receiver
global CurrentApplicationAddress
==
&&
||
&&
txna ApplicationArgs 5
btoi
txnas Accounts
load 26
==
&&
assert
txn GroupIndex
int 1
-
gtxns TypeEnum
int axfer
==
bnz marketTransfer_24_l2
txn GroupIndex
int 1
-
gtxns Amount
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 5
btoi
txnas Accounts
callsub distributePaymentViaAlgos_20
b marketTransfer_24_l3
marketTransfer_24_l2:
txn GroupIndex
int 1
-
gtxns XferAsset
txn GroupIndex
int 1
-
gtxns AssetAmount
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 5
btoi
txnas Accounts
callsub distributePaymentViaAsset_21
marketTransfer_24_l3:
txna ApplicationArgs 1
btoi
txnas Assets
global CurrentApplicationAddress
txna ApplicationArgs 4
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub transferAsset_5
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 1
btoi
txnas Assets
itob
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
callsub getOffer_19
callsub extractSellerFromOffer_17
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
callsub getOffer_19
callsub extractOfferAmountFromOffer_16
txna ApplicationArgs 2
btoi
-
txn Sender
txna ApplicationArgs 7
btoi
callsub updateoffered_28
int 1
retsub

// createVigeeOffer
createVigeeOffer_25:
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
asset_holding_get AssetBalance
store 62
store 61
load 61
txna ApplicationArgs 2
btoi
>=
assert
txna ApplicationArgs 1
btoi
txnas Assets
callsub getpolicy_29
len
int 0
>
assert
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
txna ApplicationArgs 5
txna ApplicationArgs 4
btoi
callsub updateoffered_28
int 1
retsub

// rescind
rescind_26:
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
global ZeroAddress
int 0
callsub updateoffered_28
int 1
retsub

// royaltieFreeMove
royaltieFreeMove_27:
global CallerApplicationID
int TMPL_VID
==
assert
txna ApplicationArgs 3
btoi
txnas Accounts
int 0
app_opted_in
bz royaltieFreeMove_27_l2
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 1
btoi
txnas Assets
itob
byte ""
int 0
txn Sender
txna ApplicationArgs 5
btoi
callsub updateoffered_28
royaltieFreeMove_27_l2:
txna ApplicationArgs 1
btoi
txnas Assets
txna ApplicationArgs 3
btoi
txnas Accounts
txna ApplicationArgs 4
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
callsub transferAsset_5
int 1
retsub

// update_offered
updateoffered_28:
store 56
store 55
store 54
store 53
store 52
store 51
load 51
int 0
load 52
app_local_get_ex
store 58
store 57
load 58
bnz updateoffered_28_l5
load 56
int 0
==
load 55
global ZeroAddress
==
&&
assert
updateoffered_28_l2:
load 54
int 0
>
bnz updateoffered_28_l4
load 51
load 52
app_local_del
b updateoffered_28_l6
updateoffered_28_l4:
load 51
load 52
load 53
load 54
itob
concat
app_local_put
b updateoffered_28_l6
updateoffered_28_l5:
load 57
callsub offeredamount_9
load 56
==
load 57
callsub offeredauth_10
load 55
==
&&
assert
b updateoffered_28_l2
updateoffered_28_l6:
retsub

// get_policy
getpolicy_29:
store 63
int 0
load 63
itob
app_global_get_ex
store 67
store 66
int 0
int 0
itob
app_global_get_ex
store 65
store 64
load 67
load 65
||
assert
load 67
bnz getpolicy_29_l2
load 64
b getpolicy_29_l3
getpolicy_29_l2:
load 66
getpolicy_29_l3:
retsub

// create
create_30:
byte 0x151f7c75
global CurrentApplicationID
itob
concat
log
int 1
retsub