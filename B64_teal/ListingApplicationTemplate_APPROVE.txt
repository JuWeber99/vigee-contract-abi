#pragma version 6
txn ApplicationID
int 0
==
bnz main_l17
txn OnCompletion
int DeleteApplication
==
bnz main_l16
txn OnCompletion
int UpdateApplication
==
bnz main_l15
txn OnCompletion
int OptIn
==
bnz main_l14
txn OnCompletion
int CloseOut
==
bnz main_l13
txn OnCompletion
int NoOp
==
bnz main_l7
err
main_l7:
txna ApplicationArgs 0
method "list(pay,asset,application,uint64,uint64,appl)void"
==
bnz main_l12
txna ApplicationArgs 0
method "buy(asset,application,account,account,account,uint64,pay)void"
==
bnz main_l10
err
main_l10:
callsub buynft_6
main_l11:
return
main_l12:
callsub listNft_5
b main_l11
main_l13:
int 1
return
main_l14:
int 1
return
main_l15:
txn Sender
global CreatorAddress
==
return
main_l16:
txn Sender
global CreatorAddress
==
return
main_l17:
int 1
return

// resolveYield
resolveYield_0:
store 24
store 23
load 23
load 24
mulw
int 0
int 10000
divmodw
pop
pop
swap
!
assert
itob
log
load 24
int 0
==
bnz resolveYield_0_l2
load 23
load 24
mulw
int 0
int 10000
divmodw
pop
pop
swap
!
assert
b resolveYield_0_l3
resolveYield_0_l2:
int 0
resolveYield_0_l3:
retsub

// getApplicationAddress
getApplicationAddress_1:
store 11
load 11
app_params_get AppAddress
store 13
store 12
load 12
retsub

// fetchSolidarityRate
fetchSolidarityRate_2:
store 26
store 25
load 25
load 26
byte "SR"
app_local_get_ex
store 28
store 27
load 28
bnz fetchSolidarityRate_2_l2
int 0
b fetchSolidarityRate_2_l3
fetchSolidarityRate_2_l2:
load 27
fetchSolidarityRate_2_l3:
retsub

// fetchSolidarityAssetID
fetchSolidarityAssetID_3:
store 14
load 14
byte "SA"
app_global_get_ex
store 16
store 15
load 16
bnz fetchSolidarityAssetID_3_l2
int 0
b fetchSolidarityAssetID_3_l3
fetchSolidarityAssetID_3_l2:
load 15
fetchSolidarityAssetID_3_l3:
retsub

// addSolidarityFeeForUser
addSolidarityFeeForUser_4:
store 21
store 20
store 19
store 18
store 17
load 18
load 17
load 19
callsub fetchSolidarityRate_2
callsub resolveYield_0
store 22
itxn_begin
int pay
itxn_field TypeEnum
load 22
itxn_field Amount
int 0
itxn_field Fee
load 19
callsub getApplicationAddress_1
itxn_field Receiver
itxn_next
int appl
itxn_field TypeEnum
load 19
itxn_field ApplicationID
int NoOp
itxn_field OnCompletion
int 0
itxn_field Fee
method "addSolidarityForUser(pay,account,account,string,asset)void"
itxn_field ApplicationArgs
int 1
itob
itxn_field ApplicationArgs
int 2
itob
itxn_field ApplicationArgs
int 0
itob
itxn_field ApplicationArgs
byte "auction"
itxn_field ApplicationArgs
load 17
itxn_field Accounts
load 19
callsub getApplicationAddress_1
itxn_field Accounts
load 21
itxn_field Assets
itxn_submit
retsub

// listNft
listNft_5:
int TMPL_VID
callsub fetchSolidarityAssetID_3
store 0
txn Sender
txna ApplicationArgs 1
btoi
txnas Assets
asset_holding_get AssetBalance
store 2
store 1
txna ApplicationArgs 1
btoi
txnas Assets
asset_params_get AssetFreeze
store 4
store 3
txna ApplicationArgs 1
btoi
txnas Assets
asset_params_get AssetClawback
store 6
store 5
txna ApplicationArgs 2
btoi
txnas Applications
app_params_get AppAddress
store 8
store 7
txn Sender
txna ApplicationArgs 2
btoi
txnas Applications
txna ApplicationArgs 1
btoi
txnas Assets
itob
app_local_get_ex
store 10
store 9
byte "app"
app_global_get
int 0
==
txn GroupIndex
int 1
-
gtxns ApplicationID
txna ApplicationArgs 2
btoi
txnas Applications
==
&&
load 1
int 0
>
&&
load 3
load 7
==
&&
load 5
load 7
==
&&
load 9
extract 0 32
global CurrentApplicationAddress
==
&&
load 9
int 32
extract_uint64
txna ApplicationArgs 3
btoi
<=
&&
assert
txn Sender
txn GroupIndex
int 2
-
gtxns Amount
int TMPL_VID
int TMPL_VID
callsub getApplicationAddress_1
load 0
callsub addSolidarityFeeForUser_4
byte "app"
txna ApplicationArgs 2
btoi
txnas Applications
app_global_put
byte "asset"
txna ApplicationArgs 1
btoi
txnas Assets
app_global_put
byte "amount"
txna ApplicationArgs 3
btoi
app_global_put
byte "price"
txna ApplicationArgs 4
btoi
app_global_put
byte "account"
txn Sender
app_global_put
int 1
retsub

// buy_nft
buynft_6:
txna ApplicationArgs 4
btoi
txnas Accounts
txna ApplicationArgs 2
btoi
txnas Applications
txna ApplicationArgs 1
btoi
txnas Assets
itob
app_local_get_ex
store 30
store 29
txna ApplicationArgs 4
btoi
txnas Accounts
byte "account"
app_global_get
==
txna ApplicationArgs 2
btoi
txnas Applications
byte "app"
app_global_get
==
&&
txna ApplicationArgs 1
btoi
txnas Assets
byte "asset"
app_global_get
==
&&
txn GroupIndex
int 1
-
gtxns Amount
byte "price"
app_global_get
>=
&&
txna ApplicationArgs 6
btoi
byte "amount"
app_global_get
<=
&&
txn GroupIndex
int 1
-
gtxns Receiver
global CurrentApplicationAddress
==
&&
load 30
&&
assert
itxn_begin
int pay
itxn_field TypeEnum
txn GroupIndex
int 1
-
gtxns Amount
itxn_field Amount
txna ApplicationArgs 3
btoi
txnas Accounts
itxn_field Receiver
itxn_next
int appl
itxn_field TypeEnum
txna ApplicationArgs 2
btoi
txnas Applications
itxn_field ApplicationID
method "transfer(asset,uint64,account,account,account,txn,asset,uint64)void"
itxn_field ApplicationArgs
int 0
itob
itxn_field ApplicationArgs
txna ApplicationArgs 6
btoi
itob
itxn_field ApplicationArgs
int 1
itob
itxn_field ApplicationArgs
int 2
itob
itxn_field ApplicationArgs
int 3
itob
itxn_field ApplicationArgs
int 0
itob
itxn_field ApplicationArgs
load 29
callsub offeredamount_7
itob
itxn_field ApplicationArgs
txna ApplicationArgs 1
btoi
txnas Assets
itxn_field Assets
txna ApplicationArgs 4
btoi
txnas Accounts
itxn_field Accounts
txn Sender
itxn_field Accounts
txna ApplicationArgs 5
btoi
txnas Accounts
itxn_field Accounts
itxn_submit
byte "asset"
app_global_del
byte "amount"
app_global_del
byte "app"
app_global_del
byte "account"
app_global_del
byte "price"
app_global_del
int 1
retsub

// offered_amount
offeredamount_7:
store 31
load 31
int 32
extract_uint64
retsub