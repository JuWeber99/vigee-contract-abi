#pragma version 6
txn OnCompletion
int DeleteApplication
==
bnz main_l29
txn OnCompletion
int UpdateApplication
==
bnz main_l28
txn OnCompletion
int OptIn
==
bnz main_l27
txn OnCompletion
int CloseOut
==
bnz main_l26
txn OnCompletion
int NoOp
==
bnz main_l6
err
main_l6:
txn ApplicationID
int 0
==
txna ApplicationArgs 0
method "create()uint64"
==
&&
bnz main_l25
txn Sender
global CreatorAddress
==
txna ApplicationArgs 0
method "initiatePlatform()uint64"
==
&&
bnz main_l24
txna ApplicationArgs 0
method "changeIndividualSolidarity(account,uint64)void"
==
bnz main_l23
txna ApplicationArgs 0
method "addSolidarityForUser(pay,account,account,string,asset)void"
==
bnz main_l22
txna ApplicationArgs 0
method "raiseOfferCount(account)void"
==
bnz main_l21
txna ApplicationArgs 0
method "raiseCollectionCount(account)void"
==
bnz main_l20
txna ApplicationArgs 0
method "raisePolicyCount(account)void"
==
bnz main_l19
txna ApplicationArgs 0
method "removeOfferFromUser(account, app)void"
==
bnz main_l18
txna ApplicationArgs 0
method "addContractHash(prefix,application)void"
==
txn Sender
global CreatorAddress
==
&&
bnz main_l16
err
main_l16:
callsub addContractHash_22
main_l17:
return
main_l18:
callsub removeOfferFromUser_15
b main_l17
main_l19:
callsub raisePolicyCount_17
b main_l17
main_l20:
callsub raiseCollectionCount_18
b main_l17
main_l21:
callsub raiseOfferCount_16
b main_l17
main_l22:
callsub addSolidarityFeeForUser_19
b main_l17
main_l23:
callsub changeIndividualSolidarityRate_21
b main_l17
main_l24:
callsub initiatePlatform_23
b main_l17
main_l25:
callsub create_20
b main_l17
main_l26:
int 1
return
main_l27:
int 1
return
main_l28:
txn Sender
global CreatorAddress
==
return
main_l29:
txn Sender
global CreatorAddress
==
return

// resolveYield
resolveYield_0:
store 13
store 12
load 13
int 0
==
bnz resolveYield_0_l2
int 0
load 12
load 13
int 10000
mulw
divmodw
pop
pop
swap
!
assert
b resolveYield_0_l3
resolveYield_0_l2:
int 0
resolveYield_0_l3:
retsub

// createAsset
createAsset_1:
store 26
store 25
store 24
store 23
store 22
store 21
itxn_begin
int acfg
itxn_field TypeEnum
global CurrentApplicationAddress
itxn_field ConfigAssetClawback
global CurrentApplicationAddress
itxn_field ConfigAssetReserve
global CurrentApplicationAddress
itxn_field ConfigAssetManager
int 1
itxn_field ConfigAssetDefaultFrozen
load 22
itxn_field ConfigAssetName
load 23
itxn_field ConfigAssetUnitName
load 21
itxn_field ConfigAssetTotal
load 24
itxn_field ConfigAssetURL
load 25
itxn_field ConfigAssetDecimals
load 26
itxn_field ConfigAssetMetadataHash
int 0
itxn_field Fee
itxn_submit
itxn CreatedAssetID
retsub

// transferAsset
transferAsset_2:
store 17
store 16
store 15
store 14
itxn_begin
int axfer
itxn_field TypeEnum
load 14
itxn_field XferAsset
load 15
itxn_field AssetSender
load 16
itxn_field AssetReceiver
load 17
itxn_field AssetAmount
itxn_submit
retsub

// getSolidarityAsset
getSolidarityAsset_3:
byte "SA"
app_global_get
retsub

// getCollectionCount
getCollectionCount_4:
store 6
load 6
byte "SR"
app_local_get
retsub

// getPolicyCount
getPolicyCount_5:
store 4
load 4
byte "SR"
app_local_get
retsub

// getOfferCount
getOfferCount_6:
store 1
load 1
byte "SR"
app_local_get
retsub

// incrementOfferCount
incrementOfferCount_7:
store 2
load 2
byte "SR"
load 2
callsub getOfferCount_6
int 1
+
app_local_put
retsub

// decrementOfferCount
decrementOfferCount_8:
store 0
load 0
byte "SR"
load 0
callsub getOfferCount_6
int 1
-
app_local_put
retsub

// incrementPolicyCount
incrementPolicyCount_9:
store 3
load 3
byte "PC"
load 3
callsub getPolicyCount_5
int 1
-
app_local_put
retsub

// incrementCollectionCount
incrementCollectionCount_10:
store 5
load 5
byte "CC"
load 5
callsub getCollectionCount_4
int 1
-
app_local_put
retsub

// setSolidarityRate
setSolidarityRate_11:
store 19
store 18
load 18
byte "SR"
load 19
app_local_put
retsub

// setSolidarityAssetID
setSolidarityAssetID_12:
store 27
byte "SA"
load 27
app_global_put
retsub

// raiseSolidarityContribution
raiseSolidarityContribution_13:
store 8
store 7
load 7
byte "SCA"
load 8
app_local_put
retsub

// issueSolidarityTokens
issueSolidarityTokens_14:
store 10
store 9
load 10
int 180
callsub resolveYield_0
store 11
callsub getSolidarityAsset_3
global CurrentApplicationAddress
load 9
load 11
callsub transferAsset_2
retsub

// removeOfferFromUser
removeOfferFromUser_15:
txn Sender
callsub decrementOfferCount_8
int 1
retsub

// raiseOfferCount
raiseOfferCount_16:
txn Sender
callsub incrementOfferCount_7
int 1
retsub

// raisePolicyCount
raisePolicyCount_17:
txn Sender
callsub incrementPolicyCount_9
int 1
retsub

// raiseCollectionCount
raiseCollectionCount_18:
txn Sender
callsub incrementCollectionCount_10
int 1
retsub

// addSolidarityFeeForUser
addSolidarityFeeForUser_19:
txna ApplicationArgs 1
btoi
txnas Accounts
txn GroupIndex
int 1
-
gtxns Amount
callsub raiseSolidarityContribution_13
txna ApplicationArgs 1
btoi
txnas Accounts
txn GroupIndex
int 1
-
gtxns Amount
callsub issueSolidarityTokens_14
int 1
retsub

// create
create_20:
byte 0x151f7c75
global CurrentApplicationID
itob
concat
log
int 1
retsub

// changeIndividualSolidarityRate
changeIndividualSolidarityRate_21:
txn Sender
txna ApplicationArgs 2
btoi
callsub setSolidarityRate_11
int 1
retsub

// addContractHash
addContractHash_22:
int 1
retsub

// initiatePlatform
initiatePlatform_23:
int 1000000
byte "VGTU"
byte "VSOLI"
byte "ipfs://testcidr/metadata.json"
int 10
byte "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
callsub createAsset_1
store 20
load 20
callsub setSolidarityAssetID_12
byte 0x151f7c75
load 20
itob
concat
log
int 1
retsub